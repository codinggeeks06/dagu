// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiTokenScopes  = "apiToken.Scopes"
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for DAGAction.
const (
	DAGActionMarkFailed  DAGAction = "mark-failed"
	DAGActionMarkSuccess DAGAction = "mark-success"
	DAGActionRename      DAGAction = "rename"
	DAGActionRetry       DAGAction = "retry"
	DAGActionSave        DAGAction = "save"
	DAGActionStart       DAGAction = "start"
	DAGActionStop        DAGAction = "stop"
	DAGActionSuspend     DAGAction = "suspend"
)

// Defines values for DAGDetailTab.
const (
	DAGDetailTabHistory      DAGDetailTab = "history"
	DAGDetailTabLog          DAGDetailTab = "log"
	DAGDetailTabSchedulerLog DAGDetailTab = "scheduler-log"
	DAGDetailTabSpec         DAGDetailTab = "spec"
	DAGDetailTabStatus       DAGDetailTab = "status"
)

// Defines values for ErrorCode.
const (
	ErrorCodeAlreadyExists   ErrorCode = "already_exists"
	ErrorCodeAlreadyRunning  ErrorCode = "already_running"
	ErrorCodeBadGateway      ErrorCode = "bad_gateway"
	ErrorCodeBadRequest      ErrorCode = "bad_request"
	ErrorCodeForbidden       ErrorCode = "forbidden"
	ErrorCodeInternalError   ErrorCode = "internal_error"
	ErrorCodeNotFound        ErrorCode = "not_found"
	ErrorCodeNotRunning      ErrorCode = "not_running"
	ErrorCodeRemoteNodeError ErrorCode = "remote_node_error"
	ErrorCodeUnauthorized    ErrorCode = "unauthorized"
)

// Defines values for HealthResponseStatus.
const (
	HealthResponseStatusHealthy   HealthResponseStatus = "healthy"
	HealthResponseStatusUnhealthy HealthResponseStatus = "unhealthy"
)

// Defines values for NodeStatus.
const (
	NodeStatusN0 NodeStatus = 0
	NodeStatusN1 NodeStatus = 1
	NodeStatusN2 NodeStatus = 2
	NodeStatusN3 NodeStatus = 3
	NodeStatusN4 NodeStatus = 4
	NodeStatusN5 NodeStatus = 5
	NodeStatusN6 NodeStatus = 6
)

// Defines values for NodeStatusText.
const (
	NodeStatusTextCancelled      NodeStatusText = "cancelled"
	NodeStatusTextFailed         NodeStatusText = "failed"
	NodeStatusTextFinished       NodeStatusText = "finished"
	NodeStatusTextNotStarted     NodeStatusText = "not started"
	NodeStatusTextPartialSuccess NodeStatusText = "partial success"
	NodeStatusTextRunning        NodeStatusText = "running"
	NodeStatusTextSkipped        NodeStatusText = "skipped"
)

// Defines values for RunStatus.
const (
	RunStatusN0 RunStatus = 0
	RunStatusN1 RunStatus = 1
	RunStatusN2 RunStatus = 2
	RunStatusN3 RunStatus = 3
	RunStatusN4 RunStatus = 4
	RunStatusN6 RunStatus = 6
)

// Defines values for RunStatusText.
const (
	RunStatusTextCancelled      RunStatusText = "cancelled"
	RunStatusTextFailed         RunStatusText = "failed"
	RunStatusTextFinished       RunStatusText = "finished"
	RunStatusTextNotStarted     RunStatusText = "not started"
	RunStatusTextPartialSuccess RunStatusText = "partial success"
	RunStatusTextRunning        RunStatusText = "running"
)

// DAG Core DAG configuration containing dag-run definition and metadata
type DAG struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"DefaultParams,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"Description,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"Group,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"Name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"Params,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"Schedule,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"Tags,omitempty"`
}

// DAGAction Action to be performed on the DAG. Possible values include:
// - start: Start the DAG
// - suspend: Suspend the DAG
// - stop: Stop the DAG
// - retry: Retry the last run
// - mark-success: Mark the last run as successful
// - mark-failed: Mark the last run as failed
// - save: Save the current state of the DAG
// - rename: Rename the DAG
type DAGAction string

// DAGDetailTab Indicates which part of the DAG to retrieve
type DAGDetailTab string

// DAGDetails Detailed DAG configuration information
type DAGDetails struct {
	// DefaultParams Default parameter values in JSON format if not specified at runtime
	DefaultParams *string `json:"DefaultParams,omitempty"`

	// Delay Time in seconds to wait before starting the DAG
	Delay *int `json:"Delay,omitempty"`

	// Description Human-readable description of the DAG's purpose and behavior
	Description *string `json:"Description,omitempty"`

	// Env List of environment variables to set before executing
	Env *[]string `json:"Env,omitempty"`

	// Group Logical grouping of related DAGs for organizational purposes
	Group *string `json:"Group,omitempty"`

	// HandlerOn Configuration for event handlers in a DAG
	HandlerOn *HandlerOn `json:"HandlerOn,omitempty"`

	// HistRetentionDays Number of days to retain historical logs
	HistRetentionDays *int `json:"HistRetentionDays,omitempty"`

	// LogDir Directory path for storing log files
	LogDir *string `json:"LogDir,omitempty"`

	// MaxActiveRuns Maximum number of concurrent steps to run
	MaxActiveRuns *int `json:"MaxActiveRuns,omitempty"`

	// Name Unique identifier for the DAG within its group
	Name string `json:"Name"`

	// Params List of parameter names that can be passed to the DAG at runtime
	Params *[]string `json:"Params,omitempty"`

	// Preconditions Conditions that must be met before the DAG can start
	Preconditions *[]Precondition `json:"Preconditions,omitempty"`

	// RunConfig Configuration for controlling user interactions when starting DAG runs
	RunConfig *struct {
		// AllowEditParams Allow users to edit parameters when starting the DAG
		AllowEditParams *bool `json:"allowEditParams,omitempty"`

		// AllowEditRunId Allow users to specify custom run IDs
		AllowEditRunId *bool `json:"allowEditRunId,omitempty"`
	} `json:"RunConfig,omitempty"`

	// Schedule List of scheduling expressions defining when the DAG should run
	Schedule *[]Schedule `json:"Schedule,omitempty"`

	// Steps List of steps to execute in the DAG
	Steps *[]Step `json:"Steps,omitempty"`

	// Tags List of tags for categorizing and filtering DAGs
	Tags *[]string `json:"Tags,omitempty"`
}

// DAGHistoryData Historical run data for a DAG
type DAGHistoryData struct {
	// GridData Grid data for visualization
	GridData []DAGLogGridItem `json:"GridData"`

	// Logs Detailed status information for each run
	Logs []DAGLogStatusFile `json:"Logs"`
}

// DAGLogGridItem Grid item for log visualization
type DAGLogGridItem struct {
	// Name Name of the step
	Name string `json:"Name"`

	// Vals Status of the step ordered by time
	Vals []NodeStatus `json:"Vals"`
}

// DAGLogStatusFile Log status file information
type DAGLogStatusFile struct {
	// File Path to the log file
	File string `json:"File"`

	// Status Detailed status of a dag-run including child nodes
	Status DAGStatusDetails `json:"Status"`
}

// DAGStatus Current status of a dag-run
type DAGStatus struct {
	// FinishedAt RFC 3339 timestamp when the dag-run finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to the log file
	Log *string `json:"Log,omitempty"`

	// Name Name of the DAG being executed
	Name string `json:"Name"`

	// Params Runtime parameters passed to the DAG in JSON format
	Params *string `json:"Params,omitempty"`

	// RequestId Unique identifier for the dag-run request
	RequestId string `json:"RequestId"`

	// StartedAt RFC 3339 timestamp when the dag-run started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 6: "Partial Success"
	Status RunStatus `json:"Status"`

	// StatusText Human-readable status description for the dag-run
	StatusText RunStatusText `json:"StatusText"`
}

// DAGStatusDetails Detailed status of a dag-run including child nodes
type DAGStatusDetails struct {
	// FinishedAt RFC3339 timestamp when the dag-run finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to the log file
	Log string `json:"Log"`

	// Name Name of the DAG
	Name string `json:"Name"`

	// Nodes Status of individual steps within the DAG
	Nodes []Node `json:"Nodes"`

	// OnCancel Status of an individual step within a dag-run
	OnCancel *Node `json:"OnCancel,omitempty"`

	// OnExit Status of an individual step within a dag-run
	OnExit *Node `json:"OnExit,omitempty"`

	// OnFailure Status of an individual step within a dag-run
	OnFailure *Node `json:"OnFailure,omitempty"`

	// OnSuccess Status of an individual step within a dag-run
	OnSuccess *Node `json:"OnSuccess,omitempty"`

	// Params Parameters in JSON format
	Params *string `json:"Params,omitempty"`

	// RequestId Unique identifier for the run request
	RequestId string `json:"RequestId"`

	// StartedAt RFC3339 timestamp when the dag-run started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code indicating current run state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 6: "Partial Success"
	Status RunStatus `json:"Status"`

	// StatusText Human-readable status description for the dag-run
	StatusText RunStatusText `json:"StatusText"`
}

// DAGStatusFile DAG file with its status information
type DAGStatusFile struct {
	// DAG Core DAG configuration containing dag-run definition and metadata
	DAG DAG `json:"DAG"`

	// Error Error message if any
	Error *string `json:"Error,omitempty"`

	// File Path to the DAG file
	File string `json:"File"`

	// Status Current status of a dag-run
	Status DAGStatus `json:"Status"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"Suspended"`
}

// DAGStatusFileDetails Detailed status information for a DAG instance
type DAGStatusFileDetails struct {
	// DAG Detailed DAG configuration information
	DAG DAGDetails `json:"DAG"`

	// Error Error message if any
	Error *string `json:"Error,omitempty"`

	// File Path to the DAG file
	File string `json:"File"`

	// Status Detailed status of a dag-run including child nodes
	Status DAGStatusDetails `json:"Status"`

	// Suspended Whether the DAG is suspended
	Suspended bool `json:"Suspended"`
}

// Error Generic error response object
type Error struct {
	// Code Error code indicating the type of error
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Short error message
	Message string `json:"message"`
}

// ErrorCode Error code indicating the type of error
type ErrorCode string

// HandlerOn Configuration for event handlers in a DAG
type HandlerOn struct {
	// Cancel Individual task within a DAG that performs a specific operation
	Cancel *Step `json:"Cancel,omitempty"`

	// Exit Individual task within a DAG that performs a specific operation
	Exit *Step `json:"Exit,omitempty"`

	// Failure Individual task within a DAG that performs a specific operation
	Failure *Step `json:"Failure,omitempty"`

	// Success Individual task within a DAG that performs a specific operation
	Success *Step `json:"Success,omitempty"`
}

// HealthResponse Response object for the health check endpoint
type HealthResponse struct {
	// Status Overall health status of the server
	Status HealthResponseStatus `json:"status"`

	// Timestamp Current server time
	Timestamp string `json:"timestamp"`

	// Uptime Server uptime in seconds
	Uptime int `json:"uptime"`

	// Version Current version of the server
	Version string `json:"version"`
}

// HealthResponseStatus Overall health status of the server
type HealthResponseStatus string

// ListTagResponse Response object for listing all tags
type ListTagResponse struct {
	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// Tags List of unique tags
	Tags []string `json:"Tags"`
}

// Node Status of an individual step within a dag-run
type Node struct {
	// DoneCount Number of successful completions for repeating steps
	DoneCount int `json:"DoneCount"`

	// Error Error message if the step failed
	Error *string `json:"Error,omitempty"`

	// FinishedAt RFC3339 timestamp when the step finished
	FinishedAt string `json:"FinishedAt"`

	// Log Path to step-specific log file
	Log string `json:"Log"`

	// RetryCount Number of retry attempts made for this step
	RetryCount int `json:"RetryCount"`

	// StartedAt RFC3339 timestamp when the step started
	StartedAt string `json:"StartedAt"`

	// Status Numeric status code indicating current node state:
	// 0: "Not started"
	// 1: "Running"
	// 2: "Failed"
	// 3: "Cancelled"
	// 4: "Success"
	// 5: "Skipped"
	// 6: "Partial Success"
	Status NodeStatus `json:"Status"`

	// StatusText Human-readable status description for the node
	StatusText NodeStatusText `json:"StatusText"`

	// Step Individual task within a DAG that performs a specific operation
	Step Step `json:"Step"`
}

// NodeStatus Numeric status code indicating current node state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 5: "Skipped"
// 6: "Partial Success"
type NodeStatus int

// NodeStatusText Human-readable status description for the node
type NodeStatusText string

// PostDAGActionResponse Response object for posting an action to a DAG
type PostDAGActionResponse struct {
	// NewName New DAG name, if the action resulted in a new DAG
	NewName *string `json:"NewName,omitempty"`
}

// Precondition Precondition that must be satisfied before running a step or DAG
type Precondition struct {
	// Condition Expression or check to evaluate
	Condition *string `json:"Condition,omitempty"`

	// Expected Expected result of the condition evaluation
	Expected *string `json:"Expected,omitempty"`
}

// RepeatPolicy Configuration for step retry behavior
type RepeatPolicy struct {
	Backoff *RepeatPolicy_Backoff `json:"Backoff,omitempty"`

	// Interval Time in seconds to wait between retry attempts
	Interval *int `json:"Interval,omitempty"`

	// MaxIntervalSec Maximum interval in seconds (caps exponential growth)
	MaxIntervalSec *int `json:"MaxIntervalSec,omitempty"`

	// Repeat Whether the step should be retried on failure
	Repeat *bool `json:"Repeat,omitempty"`
}

// RepeatPolicyBackoff0 When true, uses default multiplier of 2.0
type RepeatPolicyBackoff0 = bool

// RepeatPolicyBackoff1 Custom exponential backoff multiplier
type RepeatPolicyBackoff1 = float32

// RepeatPolicy_Backoff defines model for RepeatPolicy.Backoff.
type RepeatPolicy_Backoff struct {
	union json.RawMessage
}

// RunStatus Numeric status code indicating current run state:
// 0: "Not started"
// 1: "Running"
// 2: "Failed"
// 3: "Cancelled"
// 4: "Success"
// 6: "Partial Success"
type RunStatus int

// RunStatusText Human-readable status description for the dag-run
type RunStatusText string

// Schedule Schedule configuration for dag-run
type Schedule struct {
	// Expression Cron expression or schedule pattern
	Expression string `json:"Expression"`
}

// SchedulerLog Log information for the scheduler
type SchedulerLog struct {
	// Content Log content
	Content string `json:"Content"`

	// LogFile Path to the scheduler log file
	LogFile string `json:"LogFile"`
}

// SearchDAGsMatchItem Details of a search match within a DAG
type SearchDAGsMatchItem struct {
	// Line Matching line content
	Line string `json:"Line"`

	// LineNumber Line number where match was found
	LineNumber int `json:"LineNumber"`

	// StartLine Start line for context
	StartLine int `json:"StartLine"`
}

// SearchDAGsResultItem Individual search result item for a DAG
type SearchDAGsResultItem struct {
	// DAG Core DAG configuration containing dag-run definition and metadata
	DAG DAG `json:"DAG"`

	// Matches Details of where matches were found
	Matches []SearchDAGsMatchItem `json:"Matches"`

	// Name Name of the matching DAG
	Name string `json:"Name"`
}

// Step Individual task within a DAG that performs a specific operation
type Step struct {
	// Args List of arguments to pass to the command
	Args *[]string `json:"Args,omitempty"`

	// CmdWithArgs Complete command string including arguments to execute
	CmdWithArgs *string `json:"CmdWithArgs,omitempty"`

	// Command Base command to execute without arguments
	Command *string `json:"Command,omitempty"`

	// Depends List of step names that must complete before this step can start
	Depends *[]string `json:"Depends,omitempty"`

	// Description Human-readable description of what the step does
	Description *string `json:"Description,omitempty"`

	// Dir Working directory for executing the step's command
	Dir *string `json:"Dir,omitempty"`

	// MailOnError Whether to send email notifications on step failure
	MailOnError *bool `json:"MailOnError,omitempty"`

	// Name Unique identifier for the step within the DAG
	Name string `json:"Name"`

	// Output Variable name to store the step's output
	Output *string `json:"Output,omitempty"`

	// Params Parameters to pass to the sub DAG in JSON format
	Params *string `json:"Params,omitempty"`

	// Preconditions Conditions that must be met before the step can start
	Preconditions *[]Precondition `json:"Preconditions,omitempty"`

	// RepeatPolicy Configuration for step retry behavior
	RepeatPolicy *RepeatPolicy `json:"RepeatPolicy,omitempty"`

	// Run Sub DAG to run
	Run *string `json:"Run,omitempty"`

	// Script Script content if the step executes a script file
	Script *string `json:"Script,omitempty"`

	// Stderr File path for capturing standard error
	Stderr *string `json:"Stderr,omitempty"`

	// Stdout File path for capturing standard output
	Stdout *string `json:"Stdout,omitempty"`
}

// StepLog Log information for a specific step
type StepLog struct {
	// Content Log content
	Content string `json:"Content"`

	// LogFile Path to the log file
	LogFile string `json:"LogFile"`

	// Step Status of an individual step within a dag-run
	Step Node `json:"Step"`
}

// ListDAGsParams defines parameters for ListDAGs.
type ListDAGsParams struct {
	// Page Page number (for pagination)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items to return per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// SearchName Filter DAGs by name
	SearchName *string `form:"searchName,omitempty" json:"searchName,omitempty"`

	// SearchTag Filter DAGs by tag
	SearchTag *string `form:"searchTag,omitempty" json:"searchTag,omitempty"`
}

// CreateDAGJSONBody defines parameters for CreateDAG.
type CreateDAGJSONBody struct {
	// Action Action to perform upon creation (if any)
	Action string `json:"action"`

	// Value Associated value for the action
	Value string `json:"value"`
}

// GetDAGDetailsParams defines parameters for GetDAGDetails.
type GetDAGDetailsParams struct {
	// Tab Specific part of the DAG to retrieve
	Tab  *DAGDetailTab `form:"tab,omitempty" json:"tab,omitempty"`
	File *string       `form:"file,omitempty" json:"file,omitempty"`

	// Step Step name within the DAG
	Step *string `form:"step,omitempty" json:"step,omitempty"`
}

// PostDAGActionJSONBody defines parameters for PostDAGAction.
type PostDAGActionJSONBody struct {
	// Action Action to be performed on the DAG. Possible values include:
	// - start: Start the DAG
	// - suspend: Suspend the DAG
	// - stop: Stop the DAG
	// - retry: Retry the last run
	// - mark-success: Mark the last run as successful
	// - mark-failed: Mark the last run as failed
	// - save: Save the current state of the DAG
	// - rename: Rename the DAG
	Action DAGAction `json:"action"`

	// Params Additional parameters for the action in JSON format
	Params *string `json:"params,omitempty"`

	// RequestId Unique request ID for the action
	RequestId *string `json:"requestId,omitempty"`

	// Step Step name if the action targets a specific step
	Step *string `json:"step,omitempty"`

	// Value Optional extra value for the action
	Value *string `json:"value,omitempty"`
}

// SearchDAGsParams defines parameters for SearchDAGs.
type SearchDAGsParams struct {
	// Q A search query string
	Q string `form:"q" json:"q"`
}

// CreateDAGJSONRequestBody defines body for CreateDAG for application/json ContentType.
type CreateDAGJSONRequestBody CreateDAGJSONBody

// PostDAGActionJSONRequestBody defines body for PostDAGAction for application/json ContentType.
type PostDAGActionJSONRequestBody PostDAGActionJSONBody

// AsRepeatPolicyBackoff0 returns the union data inside the RepeatPolicy_Backoff as a RepeatPolicyBackoff0
func (t RepeatPolicy_Backoff) AsRepeatPolicyBackoff0() (RepeatPolicyBackoff0, error) {
	var body RepeatPolicyBackoff0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepeatPolicyBackoff0 overwrites any union data inside the RepeatPolicy_Backoff as the provided RepeatPolicyBackoff0
func (t *RepeatPolicy_Backoff) FromRepeatPolicyBackoff0(v RepeatPolicyBackoff0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepeatPolicyBackoff0 performs a merge with any union data inside the RepeatPolicy_Backoff, using the provided RepeatPolicyBackoff0
func (t *RepeatPolicy_Backoff) MergeRepeatPolicyBackoff0(v RepeatPolicyBackoff0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRepeatPolicyBackoff1 returns the union data inside the RepeatPolicy_Backoff as a RepeatPolicyBackoff1
func (t RepeatPolicy_Backoff) AsRepeatPolicyBackoff1() (RepeatPolicyBackoff1, error) {
	var body RepeatPolicyBackoff1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepeatPolicyBackoff1 overwrites any union data inside the RepeatPolicy_Backoff as the provided RepeatPolicyBackoff1
func (t *RepeatPolicy_Backoff) FromRepeatPolicyBackoff1(v RepeatPolicyBackoff1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepeatPolicyBackoff1 performs a merge with any union data inside the RepeatPolicy_Backoff, using the provided RepeatPolicyBackoff1
func (t *RepeatPolicy_Backoff) MergeRepeatPolicyBackoff1(v RepeatPolicyBackoff1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepeatPolicy_Backoff) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepeatPolicy_Backoff) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all DAGs
	// (GET /dags)
	ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(w http.ResponseWriter, r *http.Request)
	// Delete a DAG
	// (DELETE /dags/{name})
	DeleteDAG(w http.ResponseWriter, r *http.Request, name string)
	// Get DAG details
	// (GET /dags/{name})
	GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams)
	// Perform an action on a DAG
	// (POST /dags/{name})
	PostDAGAction(w http.ResponseWriter, r *http.Request, name string)
	// Health check endpoint
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Search DAGs
	// (GET /search)
	SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams)
	// List all tags
	// (GET /tags)
	ListTags(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all DAGs
// (GET /dags)
func (_ Unimplemented) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new DAG
// (POST /dags)
func (_ Unimplemented) CreateDAG(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a DAG
// (DELETE /dags/{name})
func (_ Unimplemented) DeleteDAG(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get DAG details
// (GET /dags/{name})
func (_ Unimplemented) GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Perform an action on a DAG
// (POST /dags/{name})
func (_ Unimplemented) PostDAGAction(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health check endpoint
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search DAGs
// (GET /search)
func (_ Unimplemented) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all tags
// (GET /tags)
func (_ Unimplemented) ListTags(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDAGs operation middleware
func (siw *ServerInterfaceWrapper) ListDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDAGsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "searchName" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchName", r.URL.Query(), &params.SearchName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "searchName", Err: err})
		return
	}

	// ------------- Optional query parameter "searchTag" -------------

	err = runtime.BindQueryParameter("form", true, false, "searchTag", r.URL.Query(), &params.SearchTag)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "searchTag", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateDAG operation middleware
func (siw *ServerInterfaceWrapper) CreateDAG(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDAG(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDAG operation middleware
func (siw *ServerInterfaceWrapper) DeleteDAG(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDAG(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDAGDetails operation middleware
func (siw *ServerInterfaceWrapper) GetDAGDetails(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDAGDetailsParams

	// ------------- Optional query parameter "tab" -------------

	err = runtime.BindQueryParameter("form", true, false, "tab", r.URL.Query(), &params.Tab)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tab", Err: err})
		return
	}

	// ------------- Optional query parameter "file" -------------

	err = runtime.BindQueryParameter("form", true, false, "file", r.URL.Query(), &params.File)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "file", Err: err})
		return
	}

	// ------------- Optional query parameter "step" -------------

	err = runtime.BindQueryParameter("form", true, false, "step", r.URL.Query(), &params.Step)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "step", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDAGDetails(w, r, name, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDAGAction operation middleware
func (siw *ServerInterfaceWrapper) PostDAGAction(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDAGAction(w, r, name)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchDAGs operation middleware
func (siw *ServerInterfaceWrapper) SearchDAGs(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchDAGsParams

	// ------------- Required query parameter "q" -------------

	if paramValue := r.URL.Query().Get("q"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "q"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "q", r.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "q", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchDAGs(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiTokenScopes, []string{})

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags", wrapper.ListDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags", wrapper.CreateDAG)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/dags/{name}", wrapper.DeleteDAG)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/dags/{name}", wrapper.GetDAGDetails)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/dags/{name}", wrapper.PostDAGAction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/search", wrapper.SearchDAGs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tags", wrapper.ListTags)
	})

	return r
}

type ListDAGsRequestObject struct {
	Params ListDAGsParams
}

type ListDAGsResponseObject interface {
	VisitListDAGsResponse(w http.ResponseWriter) error
}

type ListDAGs200JSONResponse struct {
	// DAGs List of DAGs with their status and metadata
	DAGs []DAGStatusFile `json:"DAGs"`

	// Errors List of errors encountered during the request
	Errors *[]string `json:"Errors,omitempty"`

	// HasError Whether any errors were encountered
	HasError bool `json:"HasError"`

	// PageCount Total number of pages available
	PageCount int `json:"PageCount"`
}

func (response ListDAGs200JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGs400JSONResponse Error

func (response ListDAGs400JSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListDAGsdefaultJSONResponse) VisitListDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateDAGRequestObject struct {
	Body *CreateDAGJSONRequestBody
}

type CreateDAGResponseObject interface {
	VisitCreateDAGResponse(w http.ResponseWriter) error
}

type CreateDAG201JSONResponse struct {
	// DagID Name of the newly created DAG
	DagID string `json:"DagID"`
}

func (response CreateDAG201JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAG400JSONResponse Error

func (response CreateDAG400JSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateDAGdefaultJSONResponse) VisitCreateDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDAGRequestObject struct {
	Name string `json:"name"`
}

type DeleteDAGResponseObject interface {
	VisitDeleteDAGResponse(w http.ResponseWriter) error
}

type DeleteDAG204Response struct {
}

func (response DeleteDAG204Response) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDAG404JSONResponse Error

func (response DeleteDAG404JSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDAGdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDAGdefaultJSONResponse) VisitDeleteDAGResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDAGDetailsRequestObject struct {
	Name   string `json:"name"`
	Params GetDAGDetailsParams
}

type GetDAGDetailsResponseObject interface {
	VisitGetDAGDetailsResponse(w http.ResponseWriter) error
}

type GetDAGDetails200JSONResponse struct {
	// DAG Detailed status information for a DAG instance
	DAG DAGStatusFileDetails `json:"DAG"`

	// Definition DAG definition
	Definition *string `json:"Definition,omitempty"`

	// Errors List of errors encountered during the request
	Errors []string `json:"Errors"`

	// LogData Historical run data for a DAG
	LogData *DAGHistoryData `json:"LogData,omitempty"`

	// LogUrl URL to access logs directly
	LogUrl *string `json:"LogUrl,omitempty"`

	// ScLog Log information for the scheduler
	ScLog *SchedulerLog `json:"ScLog,omitempty"`

	// StepLog Log information for a specific step
	StepLog *StepLog `json:"StepLog,omitempty"`

	// Title Title of the Page
	Title string `json:"Title"`
}

func (response GetDAGDetails200JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetails404JSONResponse Error

func (response GetDAGDetails404JSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetDAGDetailsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDAGDetailsdefaultJSONResponse) VisitGetDAGDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDAGActionRequestObject struct {
	Name string `json:"name"`
	Body *PostDAGActionJSONRequestBody
}

type PostDAGActionResponseObject interface {
	VisitPostDAGActionResponse(w http.ResponseWriter) error
}

type PostDAGAction200JSONResponse PostDAGActionResponse

func (response PostDAGAction200JSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDAGActiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PostDAGActiondefaultJSONResponse) VisitPostDAGActionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth503JSONResponse HealthResponse

func (response GetHealth503JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetHealthdefaultJSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SearchDAGsRequestObject struct {
	Params SearchDAGsParams
}

type SearchDAGsResponseObject interface {
	VisitSearchDAGsResponse(w http.ResponseWriter) error
}

type SearchDAGs200JSONResponse struct {
	// Errors Errors encountered during the search
	Errors []string `json:"Errors"`

	// Results Search results matching the query
	Results []SearchDAGsResultItem `json:"Results"`
}

func (response SearchDAGs200JSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchDAGsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SearchDAGsdefaultJSONResponse) VisitSearchDAGsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListTagsRequestObject struct {
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse ListTagResponse

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListTagsdefaultJSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all DAGs
	// (GET /dags)
	ListDAGs(ctx context.Context, request ListDAGsRequestObject) (ListDAGsResponseObject, error)
	// Create a new DAG
	// (POST /dags)
	CreateDAG(ctx context.Context, request CreateDAGRequestObject) (CreateDAGResponseObject, error)
	// Delete a DAG
	// (DELETE /dags/{name})
	DeleteDAG(ctx context.Context, request DeleteDAGRequestObject) (DeleteDAGResponseObject, error)
	// Get DAG details
	// (GET /dags/{name})
	GetDAGDetails(ctx context.Context, request GetDAGDetailsRequestObject) (GetDAGDetailsResponseObject, error)
	// Perform an action on a DAG
	// (POST /dags/{name})
	PostDAGAction(ctx context.Context, request PostDAGActionRequestObject) (PostDAGActionResponseObject, error)
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Search DAGs
	// (GET /search)
	SearchDAGs(ctx context.Context, request SearchDAGsRequestObject) (SearchDAGsResponseObject, error)
	// List all tags
	// (GET /tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListDAGs operation middleware
func (sh *strictHandler) ListDAGs(w http.ResponseWriter, r *http.Request, params ListDAGsParams) {
	var request ListDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDAGs(ctx, request.(ListDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDAGsResponseObject); ok {
		if err := validResponse.VisitListDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDAG operation middleware
func (sh *strictHandler) CreateDAG(w http.ResponseWriter, r *http.Request) {
	var request CreateDAGRequestObject

	var body CreateDAGJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDAG(ctx, request.(CreateDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDAGResponseObject); ok {
		if err := validResponse.VisitCreateDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDAG operation middleware
func (sh *strictHandler) DeleteDAG(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteDAGRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDAG(ctx, request.(DeleteDAGRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDAG")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDAGResponseObject); ok {
		if err := validResponse.VisitDeleteDAGResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDAGDetails operation middleware
func (sh *strictHandler) GetDAGDetails(w http.ResponseWriter, r *http.Request, name string, params GetDAGDetailsParams) {
	var request GetDAGDetailsRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDAGDetails(ctx, request.(GetDAGDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDAGDetails")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDAGDetailsResponseObject); ok {
		if err := validResponse.VisitGetDAGDetailsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDAGAction operation middleware
func (sh *strictHandler) PostDAGAction(w http.ResponseWriter, r *http.Request, name string) {
	var request PostDAGActionRequestObject

	request.Name = name

	var body PostDAGActionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDAGAction(ctx, request.(PostDAGActionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDAGAction")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDAGActionResponseObject); ok {
		if err := validResponse.VisitPostDAGActionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchDAGs operation middleware
func (sh *strictHandler) SearchDAGs(w http.ResponseWriter, r *http.Request, params SearchDAGsParams) {
	var request SearchDAGsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchDAGs(ctx, request.(SearchDAGsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchDAGs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchDAGsResponseObject); ok {
		if err := validResponse.VisitSearchDAGsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request) {
	var request ListTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"U5Oj0+X1exEeZ93u39//bwAAAP//XbHO9PFbAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
